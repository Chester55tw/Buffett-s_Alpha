# -*- coding: utf-8 -*-
"""qam project adjust.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tpOIth5No2bmmwJTSkyrYbuJZv_v_Z6q
"""

import numpy as np
import scipy.stats
import matplotlib.pyplot as plt
import math
import yfinance as yf
import pandas as pd

dfbaa = yf.download('BRK-A','1998-02-01','2011-12-31')
dfsnp = yf.download('SPLV','1998-02-01','2011-12-31')
dfaapl = yf.download('AAPL','1998-02-01','2011-12-31')
dfbac = yf.download('BAC','1998-02-01','2011-12-31')
dfaxp = yf.download('AXP','1998-02-01','2011-12-31')
dfko = yf.download('KO','1998-02-01','2011-12-31')
dfcvx = yf.download('CVX','1998-02-01','2011-12-31')
dfoxy = yf.download('OXY','1998-02-01','2011-12-31')
dfkhc = yf.download('KH','1998-02-01','2011-12-31') 
dfmco = yf.download('MCO','1998-02-01','2011-12-31')
dfatvi = yf.download('ATVI','1998-02-01','2011-12-31')
dfhp = yf.download('HPQ','1998-02-01','2011-12-31')
dfdva = yf.download('DVA','1998-02-01','2011-12-31')
dfvrsn = yf.download('VRSN','1998-02-01','2011-12-31') 
dfc = yf.download('C','1998-02-01','2011-12-31')
dfkr = yf.download('KR','1998-02-01','2011-12-31')

dfbaa

dfbaa['ret'] = dfbaa['Close'].pct_change()
dfsnp['ret'] = dfsnp['Close'].pct_change()

lever = dfbaa['ret'].std() / dfsnp['ret'].std()
lever

dfaapl['ret'] = dfaapl['Close'].pct_change()
dfbac['ret'] = dfbac['Close'].pct_change()
dfaxp['ret'] = dfaxp['Close'].pct_change()
dfko['ret'] = dfko['Close'].pct_change()
dfcvx['ret'] = dfcvx['Close'].pct_change()
dfoxy['ret'] = dfoxy['Close'].pct_change()
dfkhc['ret'] = dfkhc['Close'].pct_change() #
dfmco['ret'] = dfmco['Close'].pct_change()
dfatvi['ret'] = dfatvi['Close'].pct_change()
dfhp['ret'] = dfhp['Close'].pct_change()
dfdva['ret'] = dfdva['Close'].pct_change()
dfvrsn['ret'] = dfvrsn['Close'].pct_change()
dfc['ret'] = dfc['Close'].pct_change()
dfkr['ret'] = dfkr['Close'].pct_change()

for ticker, df in dataframes.items():
    rolling_std_dev = df['ret'].rolling(window=30).std()
    rolling_std_dev.plot(label=ticker)

plt.legend()
plt.title('30-Day Rolling Standard Deviation')
plt.show()

port_ret = 0.464* dfaapl['ret'] + 0.091*dfbac['ret'] + 0.077*dfaxp['ret'] + 0.076 * dfko['ret'] + 0.066*dfcvx['ret'] + 0.041*dfoxy['ret']+\
0.023*dfmco['ret']+0.013*dfatvi['ret'] + 0.011*dfhp['ret'] + 0.009*dfdva['ret'] + 0.008*dfvrsn['ret'] + 0.008*dfc['ret'] + 0.008*dfkr['ret']
port_ret = port_ret*1.7

dfbaa['ret'] = dfbaa['Close'].pct_change()

plt.plot(np.cumsum(dfbaa['ret']), label = 'stock return' )
plt.plot(np.cumsum(port_ret), label='portfolio return' )
plt.legend()
plt.show()

dataframes = {
    'AAPL': dfaapl,
    'BAC': dfbac,
    'AXP': dfaxp,
    'KO': dfko,
    'CVX': dfcvx,
    'OXY': dfoxy,
    'MCO': dfmco,
    'ATVI': dfatvi,
    'HPQ': dfhp,
    'DVA': dfdva,
    'VRSN': dfvrsn,
    'C': dfc,
    'KR': dfkr
}

for ticker, df in dataframes.items():
    plt.plot(np.cumsum(df['ret']), label=ticker)

plt.legend()
plt.show()

dfaapl

#ticker_object = yf.Ticker('AAPL')
#balancesheet = ticker_object.get_balancesheet()
#print(balancesheet)

ff_df = pd.read_csv("F-F_Research_Data_Factors_daily.CSV")
ff_df['Date'] = pd.to_datetime(ff_df['Date'], format = "%Y%m%d")

ff_df = ff_df[(ff_df['Date'] > '1998-02-02') & (ff_df['Date'] <= '2011-12-31')]
ff_df.set_index('Date')

port_ret = port_ret.dropna()
smb = ff_df['SMB']
hml = ff_df['HML']
rf = ff_df['RF']
mktrf = ff_df['Mkt-RF']
ff_df['port ret'] = port_ret.values
#ff_df = ff_df.set_index('Date')

import statsmodels.api as sm

initial_investment = 10000
shares = initial_investment / dfbaa['Close'].iloc[0] # assuming dfbaa is the initial portfolio
portfolio_value = shares * dfbaa['Close'] # replace dfbaa with the actual portfolio dataframe
portfolio_value.plot()

Y = ff_df['port ret'] - ff_df['RF']/100
ff_df = ff_df
X = sm.add_constant(ff_df[['Mkt-RF', 'SMB', 'HML']])
model = sm.OLS(Y, X)
result = model.fit()
print(result.summary())

cumulative_returns = (1 + port_ret).cumprod()
drawdown = (cumulative_returns.cummax() - cumulative_returns) / cumulative_returns.cummax()
max_drawdown = drawdown.max()
print(f"Maximum Drawdown: {max_drawdown}")